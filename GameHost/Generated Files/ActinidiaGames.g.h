// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/Windows.UI.Xaml.Data.h"
#include "winrt/Windows.UI.Xaml.Interop.h"
#include "winrt/Windows.UI.Xaml.Markup.h"
#include "winrt/Windows.UI.Xaml.Media.h"
#include "winrt/Windows.UI.Composition.h"
#include "winrt/Windows.UI.Xaml.h"
#include "winrt/Windows.UI.Xaml.Controls.h"
#include "winrt/GameHost.h"

namespace winrt::GameHost::implementation {

template <typename D, typename... I>
struct WINRT_EBO ActinidiaGames_base : implements<D, GameHost::IActinidiaGames, Windows::UI::Xaml::Data::INotifyPropertyChanged, I...>
{
    using base_type = ActinidiaGames_base;
    using class_type = GameHost::ActinidiaGames;
    using implements_type = typename ActinidiaGames_base::implements_type;
    using implements_type::implements_type;
    
#if _MSC_VER < 1914
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename impl::implements_default_interface<D>::type, default_interface<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<default_interface<class_type>>(*this)));
        return result;
    }
#else
    operator impl::producer_ref<class_type> const() const noexcept
    {
        return { to_abi<default_interface<class_type>>(this) };
    }
#endif

    hstring GetRuntimeClassName() const
    {
        return L"GameHost.ActinidiaGames";
    }
};

}

namespace winrt::GameHost::factory_implementation {

template <typename D, typename T, typename... I>
struct WINRT_EBO ActinidiaGamesT : implements<D, Windows::Foundation::IActivationFactory, GameHost::IActinidiaGamesFactory, I...>
{
    using instance_type = GameHost::ActinidiaGames;

    hstring GetRuntimeClassName() const
    {
        return L"GameHost.ActinidiaGames";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    GameHost::ActinidiaGames CreateInstance(Windows::UI::Xaml::Media::ImageSource const& icon, Windows::UI::Xaml::Media::ImageSource const& photo, hstring const& title, hstring const& subtitle, hstring const& description, float rating)
    {
        return make<T>(icon, photo, title, subtitle, description, rating);
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_ACTINIDIAGAMES_XAML_G_H) || __has_include("ActinidiaGames.xaml.g.h")

#include "ActinidiaGames.xaml.g.h"

#else

namespace winrt::GameHost::implementation
{
    template <typename D, typename... I>
    using ActinidiaGamesT = ActinidiaGames_base<D, I...>;
}

#endif
