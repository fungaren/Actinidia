//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "MainPage.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::GameHost::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void MainPageT<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///MainPage.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::Connect(int32_t connectionId, IInspectable const& target)
    {
        switch (connectionId)
        {
        case 6:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                this->GamelistView(targetElement);
            }
            break;
        case 7:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                this->GamePhoto(targetElement);
            }
            break;
        case 8:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->GameTitle(targetElement);
            }
            break;
        case 9:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->GameSubtitle(targetElement);
            }
            break;
        case 10:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::RatingControl>();
                this->GameRating(targetElement);
            }
            break;
        case 11:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->GameDescription(targetElement);
            }
            break;
        case 12:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->buttonPlay(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->ButtonPlay_Click(p0, p1);
                    }
                });
            }
            break;
        case 13:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->buttonRunLocal(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->ButtonRunLocal_Click(p0, p1);
                    }
                });
            }
            break;
        case 14:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->buttonPublish(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->ButtonRunLocal_Click(p0, p1);
                    }
                });
            }
            break;
        case 15:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->buttonVisit(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->ButtonRunLocal_Click(p0, p1);
                    }
                });
            }
            break;
        }
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector MainPageT<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::winrt::GameHost::implementation::XamlBindings> bindings;
        switch (connectionId)
        {
            case 1: // MainPage.xaml line 1
                {
                    auto element1 = target.as<::winrt::Windows::UI::Xaml::Controls::Page>();
                    auto objBindings = std::make_unique<MainPage_obj1_Bindings>();
                    objBindings->SetDataRoot(*this);
                    bindings = ::winrt::make_self<::winrt::GameHost::implementation::XamlBindings>(std::move(objBindings));
                    Bindings = bindings;
                    element1.Loading({&*bindings, &::winrt::GameHost::implementation::XamlBindings::Loading});
                }
                break;
            case 2: // MainPage.xaml line 14
                {
                    auto element2 = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                    auto objBindings = std::make_unique<MainPage_obj2_Bindings>();
                    objBindings->SetDataRoot(element2.DataContext());
                    bindings = ::winrt::make_self<::winrt::GameHost::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element2);
                    DataTemplate::SetExtensionInstance(element2, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element2, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    struct MainPageT<D, I...>::MainPage_obj2_Bindings
        : public ::winrt::GameHost::implementation::ReferenceTypeXamlBindings<::winrt::GameHost::ActinidiaGame, ::winrt::GameHost::implementation::XamlBindingTrackingBase>
{
        MainPage_obj2_Bindings()
        {
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 2: // MainPage.xaml line 14
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                    obj2 = targetElement;
                }
                break;
            case 3: // MainPage.xaml line 19
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                    obj3 = targetElement;
                }
                break;
            case 4: // MainPage.xaml line 22
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj4 = targetElement;
                }
                break;
            case 5: // MainPage.xaml line 23
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj5 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj2.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::GameHost::ActinidiaGame>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::Grid> obj2;
        ::winrt::Windows::UI::Xaml::Controls::Image obj3 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj4 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj5 { nullptr };

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::GameHost::ActinidiaGame obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                {
                    Update_Icon(obj.Icon(), phase);
                    Update_Title(obj.Title(), phase);
                    Update_Subtitle(obj.Subtitle(), phase);
                }
            }
        }

        void Update_Icon(::winrt::Windows::UI::Xaml::Media::ImageSource obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // MainPage.xaml line 19
                Set_Windows_UI_Xaml_Controls_Image_Source(obj3, obj, std::nullopt);
            }
        }

        void Update_Title(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // MainPage.xaml line 22
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj4, obj);
            }
        }

        void Update_Subtitle(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // MainPage.xaml line 23
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj5, obj);
            }
        }

        static void Set_Windows_UI_Xaml_Controls_Image_Source(::winrt::Windows::UI::Xaml::Controls::Image const& obj, ::winrt::Windows::UI::Xaml::Media::ImageSource value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::UI::Xaml::Media::ImageSource>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::UI::Xaml::Media::ImageSource>();
            }
            obj.Source(value);
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    struct MainPage_obj1_BindingsTracking : public XamlBindingTrackingBase
    {
        MainPage_obj1_BindingsTracking()
        {}

        // Event handlers

        void VectorChanged_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& sender,
            ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e)
        {
            VectorChanged(sender, e);
        }

        // Listener update functions

        void UpdateVectorChangedListener_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& obj,
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> & cache,
            ::winrt::event_token token)
        {
            if (cache && cache != obj)
            {
                cache.VectorChanged(token);
                cache = nullptr;
            }
            if (!cache && obj)
            {
                cache = obj;
                token = obj.VectorChanged({this, &MainPage_obj1_BindingsTracking::VectorChanged_Object});
            }
        }
    };

    template <typename D, typename ... I>
    struct MainPageT<D, I...>::MainPage_obj1_Bindings
        : public ::winrt::GameHost::implementation::ReferenceTypeXamlBindings<::winrt::GameHost::MainPage, MainPage_obj1_BindingsTracking>
{
        MainPage_obj1_Bindings()
        {
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 6: // MainPage.xaml line 54
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                    obj6 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::Windows::UI::Xaml::Controls::ListView obj6 { nullptr };

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::GameHost::MainPage obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                {
                    Update_Games(obj.Games(), phase);
                }
            }
        }

        void Update_Games(::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // MainPage.xaml line 54
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(obj6, obj, std::nullopt);
            }
        }

        static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(::winrt::Windows::UI::Xaml::Controls::ItemsControl const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.ItemsSource(value);
        }
    }; 

    template struct MainPageT<struct MainPage>;
}


#pragma warning(pop)


