// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/GameHost.2.h"

namespace winrt::impl {

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_GameHost_IActinidiaGame<D>::Icon() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(GameHost::IActinidiaGame)->get_Icon(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_GameHost_IActinidiaGame<D>::Photo() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(GameHost::IActinidiaGame)->get_Photo(put_abi(value)));
    return value;
}

template <typename D> hstring consume_GameHost_IActinidiaGame<D>::Title() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(GameHost::IActinidiaGame)->get_Title(put_abi(value)));
    return value;
}

template <typename D> hstring consume_GameHost_IActinidiaGame<D>::Subtitle() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(GameHost::IActinidiaGame)->get_Subtitle(put_abi(value)));
    return value;
}

template <typename D> hstring consume_GameHost_IActinidiaGame<D>::Description() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(GameHost::IActinidiaGame)->get_Description(put_abi(value)));
    return value;
}

template <typename D> float consume_GameHost_IActinidiaGame<D>::Rating() const
{
    float value{};
    check_hresult(WINRT_SHIM(GameHost::IActinidiaGame)->get_Rating(&value));
    return value;
}

template <typename D> GameHost::ActinidiaGame consume_GameHost_IActinidiaGameFactory<D>::CreateInstance(Windows::UI::Xaml::Media::ImageSource const& icon, Windows::UI::Xaml::Media::ImageSource const& photo, param::hstring const& title, param::hstring const& subtitle, param::hstring const& description, float rating) const
{
    GameHost::ActinidiaGame value{ nullptr };
    check_hresult(WINRT_SHIM(GameHost::IActinidiaGameFactory)->CreateInstance(get_abi(icon), get_abi(photo), get_abi(title), get_abi(subtitle), get_abi(description), rating, put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_GameHost_IMainPage<D>::Games() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(GameHost::IMainPage)->get_Games(put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, GameHost::IActinidiaGame> : produce_base<D, GameHost::IActinidiaGame>
{
    int32_t WINRT_CALL get_Icon(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Icon, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().Icon());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Photo(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Photo, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().Photo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Title(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Title, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Subtitle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Subtitle, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Subtitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Description(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Description, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Description());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Rating(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Rating, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Rating());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, GameHost::IActinidiaGameFactory> : produce_base<D, GameHost::IActinidiaGameFactory>
{
    int32_t WINRT_CALL CreateInstance(void* icon, void* photo, void* title, void* subtitle, void* description, float rating, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(GameHost::ActinidiaGame), Windows::UI::Xaml::Media::ImageSource const&, Windows::UI::Xaml::Media::ImageSource const&, hstring const&, hstring const&, hstring const&, float);
            *value = detach_from<GameHost::ActinidiaGame>(this->shim().CreateInstance(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&icon), *reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&photo), *reinterpret_cast<hstring const*>(&title), *reinterpret_cast<hstring const*>(&subtitle), *reinterpret_cast<hstring const*>(&description), rating));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, GameHost::IDirectXPage> : produce_base<D, GameHost::IDirectXPage>
{};

template <typename D>
struct produce<D, GameHost::IMainPage> : produce_base<D, GameHost::IMainPage>
{
    int32_t WINRT_CALL get_Games(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Games, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().Games());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::GameHost {

inline ActinidiaGame::ActinidiaGame(Windows::UI::Xaml::Media::ImageSource const& icon, Windows::UI::Xaml::Media::ImageSource const& photo, param::hstring const& title, param::hstring const& subtitle, param::hstring const& description, float rating) :
    ActinidiaGame(impl::call_factory<ActinidiaGame, GameHost::IActinidiaGameFactory>([&](auto&& f) { return f.CreateInstance(icon, photo, title, subtitle, description, rating); }))
{}

inline DirectXPage::DirectXPage() :
    DirectXPage(impl::call_factory<DirectXPage>([](auto&& f) { return f.template ActivateInstance<DirectXPage>(); }))
{}

inline MainPage::MainPage() :
    MainPage(impl::call_factory<MainPage>([](auto&& f) { return f.template ActivateInstance<MainPage>(); }))
{}

inline XamlMetaDataProvider::XamlMetaDataProvider() :
    XamlMetaDataProvider(impl::call_factory<XamlMetaDataProvider>([](auto&& f) { return f.template ActivateInstance<XamlMetaDataProvider>(); }))
{}

}

namespace winrt::impl {

struct property_GameHost_IActinidiaGame
{ struct named {
    struct Description
    {
        struct name { static constexpr std::wstring_view value{ L"Description"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::GameHost::IActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Description();
            }
        };
    };
    struct Icon
    {
        struct name { static constexpr std::wstring_view value{ L"Icon"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::ImageSource;
        using target_type = winrt::GameHost::IActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Icon();
            }
        };
    };
    struct Photo
    {
        struct name { static constexpr std::wstring_view value{ L"Photo"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::ImageSource;
        using target_type = winrt::GameHost::IActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Photo();
            }
        };
    };
    struct Rating
    {
        struct name { static constexpr std::wstring_view value{ L"Rating"sv }; };
        using property_type = float;
        using target_type = winrt::GameHost::IActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Rating();
            }
        };
    };
    struct Subtitle
    {
        struct name { static constexpr std::wstring_view value{ L"Subtitle"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::GameHost::IActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Subtitle();
            }
        };
    };
    struct Title
    {
        struct name { static constexpr std::wstring_view value{ L"Title"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::GameHost::IActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Title();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Description, named::Icon, named::Photo, named::Rating, named::Subtitle, named::Title>; };
};

struct property_GameHost_IMainPage
{ struct named {
    struct Games
    {
        struct name { static constexpr std::wstring_view value{ L"Games"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::GameHost::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Games();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Games>; };
};

struct property_GameHost_ActinidiaGame
{ struct named {
    struct Description
    {
        struct name { static constexpr std::wstring_view value{ L"Description"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::GameHost::ActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Description();
            }
        };
    };
    struct Icon
    {
        struct name { static constexpr std::wstring_view value{ L"Icon"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::ImageSource;
        using target_type = winrt::GameHost::ActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Icon();
            }
        };
    };
    struct Photo
    {
        struct name { static constexpr std::wstring_view value{ L"Photo"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::ImageSource;
        using target_type = winrt::GameHost::ActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Photo();
            }
        };
    };
    struct Rating
    {
        struct name { static constexpr std::wstring_view value{ L"Rating"sv }; };
        using property_type = float;
        using target_type = winrt::GameHost::ActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Rating();
            }
        };
    };
    struct Subtitle
    {
        struct name { static constexpr std::wstring_view value{ L"Subtitle"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::GameHost::ActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Subtitle();
            }
        };
    };
    struct Title
    {
        struct name { static constexpr std::wstring_view value{ L"Title"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::GameHost::ActinidiaGame;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Title();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Description, named::Icon, named::Photo, named::Rating, named::Subtitle, named::Title>; };
};

struct property_GameHost_MainPage
{ struct named {
    struct Games
    {
        struct name { static constexpr std::wstring_view value{ L"Games"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::GameHost::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Games();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Games>; };
};

}

WINRT_EXPORT namespace winrt::experimental::reflect {
template <> struct named_property<GameHost::IActinidiaGame> : impl::property_GameHost_IActinidiaGame::named {};
template <> struct properties<GameHost::IActinidiaGame> : impl::property_GameHost_IActinidiaGame::list {};
template <> struct named_property<GameHost::IMainPage> : impl::property_GameHost_IMainPage::named {};
template <> struct properties<GameHost::IMainPage> : impl::property_GameHost_IMainPage::list {};
template <> struct named_property<GameHost::ActinidiaGame> : impl::property_GameHost_ActinidiaGame::named {};
template <> struct properties<GameHost::ActinidiaGame> : impl::property_GameHost_ActinidiaGame::list {};
template <> struct named_property<GameHost::MainPage> : impl::property_GameHost_MainPage::named {};
template <> struct properties<GameHost::MainPage> : impl::property_GameHost_MainPage::list {};

template <>
struct base_type<GameHost::DirectXPage> { using type = Windows::UI::Xaml::Controls::Page; };
template <>
struct base_type<GameHost::MainPage> { using type = Windows::UI::Xaml::Controls::Page; };
}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::GameHost::IActinidiaGame> : winrt::impl::hash_base<winrt::GameHost::IActinidiaGame> {};
template<> struct hash<winrt::GameHost::IActinidiaGameFactory> : winrt::impl::hash_base<winrt::GameHost::IActinidiaGameFactory> {};
template<> struct hash<winrt::GameHost::IDirectXPage> : winrt::impl::hash_base<winrt::GameHost::IDirectXPage> {};
template<> struct hash<winrt::GameHost::IMainPage> : winrt::impl::hash_base<winrt::GameHost::IMainPage> {};
template<> struct hash<winrt::GameHost::ActinidiaGame> : winrt::impl::hash_base<winrt::GameHost::ActinidiaGame> {};
template<> struct hash<winrt::GameHost::DirectXPage> : winrt::impl::hash_base<winrt::GameHost::DirectXPage> {};
template<> struct hash<winrt::GameHost::MainPage> : winrt::impl::hash_base<winrt::GameHost::MainPage> {};
template<> struct hash<winrt::GameHost::XamlMetaDataProvider> : winrt::impl::hash_base<winrt::GameHost::XamlMetaDataProvider> {};

}
